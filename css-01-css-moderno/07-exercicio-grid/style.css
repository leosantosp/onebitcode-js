* {
    margin: 0;
    padding: 0;
    box-sizing: border-box; /* Modo como as box do nosso site são renderizados*/
}

.container {
    background: darkgray;
    min-height: 100vh; /* View-port Height */
    
    /* GRID assim que é definido ele vai buscar preencher toda a tela*/
    display: grid; 
    /* Definir as colunas do template, utilizamos 'grid-template-columns' */
    /* Sempre utilizar % ou frames (fr), que é como se fosse 100% dividido: 1fr 2fr 1fr (25% 50% 25%) */
    /* Também podemos utilizar a função repeat(quantas vezes, valor a ser repetido) */
    grid-template-columns: 1fr 2fr 1fr 1fr;
    grid-template-rows: 1fr 2fr;
    
    /*O GAP funciona da mesma forma que o gap do FLEXBOX, então, 
    quanto de espaçamento haverá entre um elemento e outro? 
    
    É possível definí-lo em linhas e colunas separadas utilizando
    row-gap -> gap em linhas
    column-gap -> gap em colunas

    gap -> shortcut geral para as duas direções (row e column)
    */
    gap: 10px 15px;
    
    /* A aplicação para o grid-template-rows serve da mesma forma que o columns */
    /* grid-template-rows: repeat(3, 1fr); */


    /* GRID AUTO ROWS -> As linhas ficam com 210px. Dito isto, haverá um momento
    em que o layout vai se quebrar, pra isso podemos utilizar uma função chamada
    minmax(), nela informamos um valor mínimo e um valor máximo  */
    grid-auto-rows: minmax(310px, auto);



    

}

.item {
    border: 2px solid #2B2B2B;
    background-color: #FFF;
    font-size: 30px;
    padding: 10px;
}

/*-----------------------------*/